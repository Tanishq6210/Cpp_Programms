// Stack 
#include<iostream>
#define max 60
using namespace std;
struct student
{
    string regno;
    int age;
    float cgpa;
};

struct student a[max];
int top=-1; 
int isfull()
{
    if(top==max)
      return 1;
    else
      return 0;
}

void push(struct student s)
{
  top++;
  if(isfull())
  {cout<<"stack is full cant push....";
    return;
  }
  a[top]=s;
}

void pop()
{
    if(top==-1)
    {
        cout<<"stack is empty. Can't pop....";
        return;
    }
    struct student temp=a[top];
    cout<<"the popped element is "<<temp.regno<<" ";
    cout<<" "<<temp.age<<" "<<temp.cgpa<<"\n";
    top--;
}

void display()
{
    int i;
    for(i=0;i<=top;i++)
       cout<<a[i].regno<<" "<<a[i].age<<" "<<a[i].cgpa<<" ";
}


int main()
{
    int choice;
    struct student ss;
    do
    {
    
    cout<<"enter ur choice 1-push 2-pop 3-display .......";
    cin>>choice;
    switch(choice)
    {
        case 1: cout<<"enter the regno,age and cgpa of the student u want to insert";
                cin>>ss.regno>>ss.age>>ss.cgpa;
                push(ss);
                break;
        case 2: pop();
                break;
        case 3: display();
                break;
        default: exit(0);
        
    }
  }while(choice!=4);
}

/******** QUEUE ********/
#include<bits/stdc++.h>
#define MAX 10
using namespace std;

int arr[MAX];
int rear=-1, front=-1;



bool isFull(){
	return rear==MAX-1;
}

bool isEmpty(){
	if(front==rear)
		return true;
	else return false;
}

void enqueue(int data){
	if(isFull())
		cout<<"Can't enqueue since queue is full.\n";
	rear++;
	arr[rear] = data;
}

int dequeue(){
	if(isEmpty())
		cout<<"Queue is Empty cant dequeue...\n";
	front++;
	return arr[front];
}


void display(){
	for(int i=front+1; i<=rear; i++){
		cout<<arr[i]<<" ";
	}
	cout<<"\n";
}

int main()
{
	do{
		int choice;
		cout<<"Enter the choice: \n1: enqueue\n2: dequeue\n3:display\n";
		cin>>choice;
		switch(choice)
		{
			case 1:
				int data;
				cout<<"Enter data: ";
				cin>>data;
				enqueue(data);
				cout<<"\n";
				break;
			case 2:
				cout<<"The popped element is: "<<dequeue()<<"\n";
				break;
			case 3:
				display();
				break;
			default:
				exit(0);
		}
	}while(true);
	return 0;
}

/****          LInked List        *******/
#include<bits/stdc++.h>
using namespace std;

int n;
class node{
	public:
	string rno;
	int sem;
	node *next;
};

node *head = NULL;

void frontInsert(string r, int s){
	node *newnode = new node;
	newnode -> rno = r;
	newnode -> sem = s;
	newnode -> next = NULL;
	if(head == NULL){
		head = newnode;
	}else {
		newnode -> next = head;
		head = newnode;
	}
}

void backInsert(string r, int s){
	node *newnode = new node;
	newnode -> rno = r;
	newnode -> sem = s;
	newnode -> next = NULL;
	
	node *temp;
	temp = head;
	if(head == NULL){
		head = newnode;
	}else{
		while(temp -> next != NULL){
			temp = temp -> next;
		}
		temp -> next = newnode;
	}
}

void frontdelete(){
	if(head == NULL){
		cout<<"Linked List is Empty.\n";
		return;
	}
	node *temp;
	temp = head;
	head = head -> next;
	temp -> next = NULL;
	cout<<"Deleted data is: "<<temp -> rno<<" "<<temp -> sem;	
	
}

void backDelete(){
	node *temp = head;
	node *prev = NULL;
	while(temp -> next != NULL){
		prev = temp;
		temp = temp->next;
	}
	prev -> next = NULL;
	cout<<"Deleted data is: "<<temp -> rno<<" "<<temp -> sem;	
}

int length(){
	node *temp = head;
	int count=0;
	while(temp != NULL){
		count++;
		temp = temp -> next;
	}
	return count;
}

void display(){
	node *temp=head;
	while(temp != NULL){
		cout<<temp->rno<<" "<<temp->sem<<"\n";
		temp = temp->next;
	}
}

void middleInsert(string str, int s){
	node *newnode = new node();
	newnode->rno = str;
	newnode->sem = s;
	newnode->next = NULL;
	if(head == NULL)
		head = newnode;
	else{
		node *temp = head;
		int count = 0;
		while(count < n-1 && temp->next != NULL){
			count++;
			temp = temp->next;
		}
		newnode->next = temp->next;
		temp->next = newnode;
	}
}

void middleInsert(string str, int s, int data){
	node *newnode = new node();
	newnode->rno = str;
	newnode->sem = s;
	newnode->next = NULL;
	if(head == NULL)
		head = newnode;
	else{
		node *temp = head;
		while(temp->sem != data && temp->next != NULL){
			temp = temp->next;
		}
		newnode->next = temp->next;
		temp->next = newnode;
	}
}

void middleDelete(int del){
	node *temp, *prev;
	temp = head;
	prev = NULL;
	while(temp->sem != del && temp->next != NULL){
		prev = temp;
		temp = temp->next;
	}
	prev->next = temp->next;
	temp->next = NULL;
	cout<<"Deleted Element is "<<temp->rno<<" "<<temp->sem<<"\n";
}

int middleElement(){
	node *first = head;
	node *second = head;
	while(second->next->next != NULL && second->next != NULL){
		first=first->next;
		second=second->next->next;
	}
	return first->sem;
}

void rev(){
	node *prev = NULL;
	node *curr = head;
	node *succ = curr->next;
	while(succ != NULL){
		curr->next = prev;
		prev = curr;
		curr = succ;
		succ = succ->next;
	}
	curr->next = prev;
	head = curr;
}

int main()
{
	backInsert("one",1);
	backInsert("two",2);
	backInsert("three",3);
	backInsert("four",4);
	backInsert("five",5);
	backInsert("six",6);
	//cout<<middleElement();
	rev();
	display();
	return 0;
}
